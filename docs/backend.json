{
  "entities": {
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "type": "object",
      "description": "Represents a project in the developer's portfolio.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Project entity."
        },
        "title": {
          "type": "string",
          "description": "Title of the project."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the project."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the project's image.",
          "format": "uri"
        },
        "liveUrl": {
          "type": "string",
          "description": "URL of the live project (if applicable).",
          "format": "uri"
        },
        "githubUrl": {
          "type": "string",
          "description": "URL of the project's GitHub repository.",
          "format": "uri"
        },
        "tags": {
          "type": "array",
          "description": "Tags associated with the project.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "imageUrl"
      ]
    },
    "Experience": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Experience",
      "type": "object",
      "description": "Represents a work experience entry in the developer's portfolio.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Experience entity."
        },
        "title": {
          "type": "string",
          "description": "Job title or role."
        },
        "company": {
          "type": "string",
          "description": "Name of the company or organization."
        },
        "startDate": {
          "type": "string",
          "description": "Start date of the experience.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "End date of the experience (or 'Present' if current).",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "Description of the responsibilities and achievements."
        }
      },
      "required": [
        "id",
        "title",
        "company",
        "startDate",
        "description"
      ]
    },
    "Skill": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Skill",
      "type": "object",
      "description": "Represents a skill possessed by the developer.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Skill entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the skill."
        },
        "level": {
          "type": "number",
          "description": "Proficiency level in the skill (e.g., 1-5).",
          "format": "integer"
        },
        "category": {
          "type": "string",
          "description": "Category of the skill (e.g., Frontend, Backend, Design)."
        }
      },
      "required": [
        "id",
        "name",
        "level",
        "category"
      ]
    },
    "BlogPost": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BlogPost",
      "type": "object",
      "description": "Represents a blog post in the developer's portfolio.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the BlogPost entity."
        },
        "title": {
          "type": "string",
          "description": "Title of the blog post."
        },
        "content": {
          "type": "string",
          "description": "Content of the blog post (e.g., Markdown or HTML)."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the blog post's featured image.",
          "format": "uri"
        },
        "publishedDate": {
          "type": "string",
          "description": "Date when the blog post was published.",
          "format": "date-time"
        },
        "tags": {
          "type": "array",
          "description": "Tags associated with the blog post.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "title",
        "content",
        "publishedDate"
      ]
    },
    "Resume": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Resume",
      "type": "object",
      "description": "Represents the developer's resume information.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Resume entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the resume section (e.g., 'Summary', 'Education')."
        },
        "content": {
          "type": "string",
          "description": "Content of the resume section (e.g., text or list of items)."
        },
        "order": {
          "type": "number",
          "description": "Order in which the resume sections should be displayed.",
          "format": "integer"
        }
      },
      "required": [
        "id",
        "name",
        "content",
        "order"
      ]
    },
    "ContactMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContactMessage",
      "type": "object",
      "description": "Represents a contact message submitted by a visitor.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ContactMessage entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the sender."
        },
        "email": {
          "type": "string",
          "description": "Email address of the sender.",
          "format": "email"
        },
        "message": {
          "type": "string",
          "description": "Content of the message."
        },
        "sentDate": {
          "type": "string",
          "description": "Date when the message was sent.",
          "format": "date-time"
        },
        "walletAddress": {
          "type": "string",
          "description": "The wallet address of the user sending the message (for Web3 contact form)."
        },
        "signature": {
          "type": "string",
          "description": "The signed message from the user's wallet (for Web3 contact form)."
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "message",
        "sentDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores project information.  Accessible by all users for read operations, write access restricted to admins.",
          "params": [
            {
              "name": "projectId",
              "description": "Unique identifier for the project."
            }
          ]
        }
      },
      {
        "path": "/experience/{experienceId}",
        "definition": {
          "entityName": "Experience",
          "schema": {
            "$ref": "#/backend/entities/Experience"
          },
          "description": "Stores work experience entries. Accessible by all users for read operations, write access restricted to admins.",
          "params": [
            {
              "name": "experienceId",
              "description": "Unique identifier for the work experience entry."
            }
          ]
        }
      },
      {
        "path": "/skills/{skillId}",
        "definition": {
          "entityName": "Skill",
          "schema": {
            "$ref": "#/backend/entities/Skill"
          },
          "description": "Stores skill information. Accessible by all users for read operations, write access restricted to admins.",
          "params": [
            {
              "name": "skillId",
              "description": "Unique identifier for the skill."
            }
          ]
        }
      },
      {
        "path": "/blog_posts/{blogPostId}",
        "definition": {
          "entityName": "BlogPost",
          "schema": {
            "$ref": "#/backend/entities/BlogPost"
          },
          "description": "Stores blog post information. Accessible by all users for read operations, write access restricted to admins.",
          "params": [
            {
              "name": "blogPostId",
              "description": "Unique identifier for the blog post."
            }
          ]
        }
      },
      {
        "path": "/resume/{resumeId}",
        "definition": {
          "entityName": "Resume",
          "schema": {
            "$ref": "#/backend/entities/Resume"
          },
          "description": "Stores resume section information.  Accessible by all users for read operations, write access restricted to admins.",
          "params": [
            {
              "name": "resumeId",
              "description": "Unique identifier for the resume section."
            }
          ]
        }
      },
      {
        "path": "/contact_messages/{contactMessageId}",
        "definition": {
          "entityName": "ContactMessage",
          "schema": {
            "$ref": "#/backend/entities/ContactMessage"
          },
          "description": "Stores contact messages submitted by visitors.  Read/write access restricted to admins.",
          "params": [
            {
              "name": "contactMessageId",
              "description": "Unique identifier for the contact message."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{uid}",
        "definition": {
          "entityName": "admin",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Collection indicating admin privileges.  Existence of a document confers admin role.",
          "params": [
            {
              "name": "uid",
              "description": "User ID of the admin."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support a portfolio website with an admin panel, focusing on simplicity, security, and scalability.  Authorization Independence is achieved through path-based ownership for user-specific data and a dedicated collection for admin roles.  Structural Segregation is applied by separating public portfolio data from user-owned data and admin roles.  This approach facilitates straightforward security rules and predictable data access patterns.\n\n**Authorization Independence:**\n*   The `/users/{userId}` path ensures that all user-owned data is segregated by user ID, enabling simple path-based security rules without relying on complex `get()` calls or hierarchical authorization.\n*   Admin roles are managed via the `/roles_admin/{uid}` collection. The existence of a document in this collection confers admin privileges.\n\n**Structural Segregation:**\n*   Portfolio data (projects, experience, skills, blog posts, resume sections, contact messages) is stored in top-level collections, enabling global listing and read access while restricting write access to authorized users.\n*   This avoids mixing public and private data within the same collection.\n\n**QAPs (Rules Are Not Filters):**\n*   The segregation of data into distinct collections with well-defined security rules enables secure `list` operations. For example, listing projects or blog posts does not require complex filtering in the rules; instead, the rules simply check for read access to the respective collection.\n*   The `contact_messages` collection, accessible only to authenticated admins, avoids exposing sensitive contact information to unauthorized users."
  }
}